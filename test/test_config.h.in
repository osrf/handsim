/*
 * Copyright (C) 2015 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
*/

#ifndef __HANDSIM_TEST_CONFIG_HH__INCLUDED__
#define __HANDSIM_TEST_CONFIG_HH__INCLUDED__

#define HANDSIM_TEST_INTEGRATION_PATH "${PROJECT_SOURCE_DIR}/test/integration"
#define HANDSIM_TEST_REGRESSION_PATH "${PROJECT_SOURCE_DIR}/test/regression"
#define HANDSIM_TEST_PATH "${PROJECT_SOURCE_DIR}/test"
#define HANDSIM_PROJECT_SOURCE_PATH "${PROJECT_SOURCE_DIR}"
#define HANDSIM_PROJECT_BINARY_PATH "${PROJECT_BINARY_DIR}"

#include <iostream>
#include <climits>
#include <random>
#include <string>

#ifdef _WIN32
  #include <filesystem>
  #include <windows.h>
#else
  #include <signal.h>
  #include <sys/types.h>
  #include <sys/wait.h>
  #include <unistd.h>
#endif

#if (_MSC_VER >= 1400) // Visual Studio 2005
  #include <sstream>

  /// \brief setenv/unstenv are not present in Windows. Define them to make
  /// the code portable.
  /// \param[in] name Variable name.
  /// \param[in] value Value.
  /// \param[in] rewrite If 'name' does exist in the environment, then its
  /// value is changed to 'value' if 'rewrite' is nonzero. If overwrite is
  /// zero, then the value of 'name' is not changed.
  /// /return 0 on success or -1 on error.
  int setenv(const char * name, const char * value, int /*rewrite*/)
  {
    std::stringstream sstr;
    sstr << *name << '=' << *value;
    return _putenv(sstr.str().c_str());
  }

  /// \brief Deletes an environment variable.
  /// \param[in] name Variable name.
  void unsetenv(const char * name)
  {
    std::stringstream sstr;
    sstr << *name << '=';
    _putenv(sstr.str().c_str());
  }
#endif

namespace testing
{
  /// \brief Get a random number based on an integer converted to string.
  /// \return A random integer converted to string.
  std::string getRandomNumber()
  {
    // Initialize random number generator.
    uint32_t seed = std::random_device {}();
    std::mt19937 randGenerator(seed);

    // Create a random number based on an integer converted to string.
    std::uniform_int_distribution<int32_t> d(0, INT_MAX);

    return std::to_string(d(randGenerator));
  }
}

#endif  // header guard
