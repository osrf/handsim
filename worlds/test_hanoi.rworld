<?xml version="1.0" ?>

<%
  # Hanoi demo
  # Inertial parameters
  # Red wood density 510 kg/m^3
  density = 10.0

  disk_number = 4
  radii = [0.18, 0.16, 0.14, 0.12]

  #disk_number = 1
  #radii = [0.18]

  peg_height = 0.4 
  peg_radius = 0.01

  # Constant parameters for each ring 
  #radii = [0.17, 0.15]
  height_disk = 0.02
  radius_hole = 0.05
  points_hole = 20

  # handle
  height_handle = 0.01

  length_handle = 0.08
  radius_grasp = 0.02
  angle_offsets = [0.0, Math::PI/6.0, Math::PI/3.0, Math::PI/2.0, 2.0*Math::PI/3.0, 5.0*Math::PI/6.0, Math::PI]

  color = ["Red", "Orange", "Yellow", "Green", "Blue", "Purple"]
  z_offset = 0.9  
%>

<sdf version="1.5">
  <world name="default">

<%
   def circle_points_s(radius, points=20, xcenter=0, ycenter=0)
      polyline = []
      points.times do |i|
        angle = 2*Math::PI * i / points.to_f;
        polyline << [xcenter+radius*Math.cos(angle), ycenter+radius*Math.sin(angle)]
      end
      
      points_s = ""
      polyline.each do |p| 
        points_s += "<point>" \
                 + p[0].to_s + " " + p[1].to_s \
                 + "</point>\n"
      end
      points_s 
  end

   def handle_points_s(radius, angle0, angle, h_length, xcenter=0, ycenter=0)
        polyline = []
      # 3 points for arc connected to disk
        anglem = 0.5*(angle0.to_f + angle.to_f)
        polyline << [xcenter+radius*Math.cos(angle0), ycenter+radius*Math.sin(angle0)]
        polyline << [xcenter+radius*Math.cos(anglem), ycenter+radius*Math.sin(anglem)]
        polyline << [xcenter+radius*Math.cos(angle), ycenter+radius*Math.sin(angle)]
     # handle 
        polyline << [xcenter+(radius+h_length)*Math.cos(angle), ycenter+(radius+h_length)*Math.sin(angle)]
        polyline << [xcenter+(radius+h_length)*Math.cos(angle0), ycenter+(radius+h_length)*Math.sin(angle0)]

        points_s = ""
        polyline.each do |p| 
          points_s += "<point>" \
                   + p[0].to_s + " " + p[1].to_s \
                   + "</point>\n"
        end
      points_s 
  end

  # Star axis of symmetry: Z
  disk_number.times do |j|

    disk_radius = radii[j]
    hole_radius = radius_hole

    # approximate the inertia 
    volume = Math::PI * (disk_radius**2 - hole_radius**2) * height_disk 
    mass = density * volume
    ixx = 1.0 / 12 * mass * (3*(hole_radius**2 + disk_radius**2) + height_disk**2)
    iyy = ixx
    izz = 0.5 * mass * (hole_radius**2 + disk_radius**2)

    angle_offset = angle_offsets[j]
    abs_angle = Math::PI/6.0
    center_angle = angle_offset + abs_angle/2.0
    extended_radius = disk_radius + 1.03*radius_grasp  

    geometry_s_disk= "<geometry>\n"  \
                   + "<polyline>\n"  \
                   + circle_points_s(disk_radius, 15+5*(disk_number-j), 0, 0 ) \
                   + "<height>" + height_disk.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(hole_radius, points_hole, 0, 0 ) \
                   + "<height>" + height_disk.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "</geometry>\n"
  geometry_s_handle = "<geometry>\n"  \
                   + "<polyline>\n"  \
                   + handle_points_s(disk_radius, angle_offset, angle_offset+abs_angle, length_handle, 0, 0 ) \
                   + "<height>" + height_handle.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(radius_grasp, 15, extended_radius*Math.cos(center_angle), extended_radius*Math.sin(center_angle) ) \
                   + "<height>" + height_handle.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "</geometry>\n"
%>
    <%= '<model name="disk_' + j.to_s + '">' %>
      <pose>0 0 <%= 0.2 + (height_disk + 0.02)*j + z_offset%>  0 0 0</pose>
      <link name="disk">
        <inertial>
          <mass><%= mass %></mass>
          <inertia>
            <ixx><%= ixx %></ixx>
            <iyy><%= iyy %></iyy>
            <izz><%= izz %></izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <collision name="collision_disk">
          <%= geometry_s_disk%>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <collision name="collision_handle">
         <pose>0 0 <%= 0.5*height_disk-0.5*height_handle %>  0 0 0</pose>
          <%= geometry_s_handle%>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <visual name="visual_disk">
          <%= geometry_s_disk%>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <%= '<name>Gazebo/' + color[j%disk_number].to_s + '</name>'%>
            </script>
          </material>
        </visual>
        <visual name="visual_handle">
         <pose>0 0 <%= 0.5*height_disk-0.5*height_handle %>  0 0 0</pose>
          <%= geometry_s_handle%>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <%= '<name>Gazebo/' + color[j%disk_number].to_s + '</name>'%>
            </script>
          </material>
        </visual>
      </link>
    </model>
<%
    end
%>
    <model name="peg1">
      <static>true</static>
      <link name="link">
          <pose> 0 0 <%= peg_height/2.0 +  z_offset %> 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
                <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>

    <model name="peg2">
      <static>true</static>
      <link name="link">
          <pose>0.5 0 <%= peg_height/2.0+z_offset %> 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg2">
          <pose>0.0 0.0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg2">
          <pose>0.0 0.0 0.0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>

    <model name="peg3">
      <static>true</static>
      <link name="link">
        <pose>1.0 0 <%= peg_height/2.0+z_offset %> 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg3">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg3">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>
    <include>
      <uri>model://table</uri>
      <pose>0.45 0.25 0 0 0 0</pose>
    </include>
    <include>
      <uri>model://sun</uri>
    </include>
   </world>
</sdf>
