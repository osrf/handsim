<?xml version="1.0" ?>

<%
  distance_offset = 100
%>

<sdf version="1.5">
  <world name="default">

    <!-- begin pyramid -->
    <%
      pyramid_layers = 3

      pyramid_h  = 0.13
      # Top diameter
      pyramid_d2 = 0.1
      pyramid_r2 = pyramid_d2/2
      pyramid_clearance = 0.005
    %>
    <%
      for i in 0..pyramid_layers
        for j in 0..(pyramid_layers-i)
          x = -(pyramid_layers - i)*pyramid_r2 + j*2*pyramid_r2 + pyramid_clearance
          y = 0
          z = i*pyramid_h + pyramid_clearance
     %>
    <include>
      <name> <%="tinybot_"+i.to_s + "_" + j.to_s %> </name>
      <uri>model://tinybot</uri>
      <pose><%= x + distance_offset%> <%= y%> 0 0 0 <%= Math::PI%></pose>
    </include>
   <%
      end
    end
   %>

    <include>
      <uri>model://cricket_ball</uri>
      <pose><%= 0.5 + distance_offset%> 0 0 0 0 0</pose>
    </include>

    <!-- end pyramid -->

    <!-- begin hanoi -->
    <%
      # Hanoi demo
      # Inertial parameters
      # Red wood density 510 kg/m^3
      density = 50.0

      peg_height = 0.4 
      peg_radius = 0.01

      # Constant parameters for each ring 
      radius_up0 = 0.11
      radius_lo  = 0.065
      height_up  = 0.01
      height_lo  = 0.03
      radius_hole = 0.04
      radius_increment = 0.02
      radius_grasp = 0.02

      disk_number = 4
      points_hole = 15
      points_up   = 20

      color = ["Red", "Orange", "Yellow", "Green", "Blue", "Purple"]
      z_offset = 0.9  
    %>

<%
   def circle_points_s(radius, points=10, xcenter=0, ycenter=0)
      polyline = []
      points.times do |i|
        angle = 2*Math::PI * i / points.to_f;
        polyline << [xcenter+radius*Math.cos(angle), ycenter+radius*Math.sin(angle)]
      end
      
      points_s = ""
      polyline.each do |p| 
        points_s += "<point>" \
                 + p[0].to_s + " " + p[1].to_s \
                 + "</point>\n"
      end
      points_s 
  end
  # Star axis of symmetry: Z
  disk_number.times do |j|
       up_radius = radius_up0 + (radius_increment * (disk_number-j)) + 0.05
       lo_radius = radius_lo
       hole_radius = radius_hole

    # approximate the inertia for uper part to grasp 
    volume = Math::PI * (up_radius**2 - hole_radius**2) * height_up 
    mass = density * volume
    ixx = 1.0 / 12 * mass * (3*(hole_radius**2 + up_radius**2) + height_up**2)
    iyy = ixx
    izz = 0.5 * mass * (hole_radius**2 + up_radius**2)

    # the inertia for the separation lower part
    volume_lo = Math::PI * (lo_radius**2 - hole_radius**2) * height_lo
    mass_lo = density * volume_lo
    ixx_lo = 1.0 / 12 * mass_lo* (3*(hole_radius**2 + lo_radius**2) + height_lo**2)
    iyy_lo = ixx_lo
    izz_lo = 0.5 * mass_lo * (hole_radius**2 + lo_radius**2)

    # the 4 circles for easy grasp on the boundary
    
    geometry_s_up  = "<geometry>\n"  \
                   + "<polyline>\n"  \
                   + circle_points_s(up_radius, 15+5*(disk_number-j), 0, 0 ) \
                   + "<height>" + height_up.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(hole_radius, 10, 0, 0 ) \
                   + "<height>" + height_up.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(radius_grasp, 20, up_radius-0.01-radius_grasp, 0) \
                   + "<height>" + height_up.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(radius_grasp, 20, 0, up_radius-0.01-radius_grasp) \
                   + "<height>" + height_up.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(radius_grasp, 20, -1*(up_radius-0.01-radius_grasp), 0) \
                   + "<height>" + height_up.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(radius_grasp, 20, 0, -1*(up_radius-0.01-radius_grasp) ) \
                   + "<height>" + height_up.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "</geometry>\n"

    geometry_s_lo  = "<geometry>\n"  \
                   + "<polyline>\n"  \
                   + circle_points_s(lo_radius, 10+4*(disk_number-j), 0, 0 ) \
                   + "<height>" + height_lo.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "<polyline>\n"  \
                   + circle_points_s(hole_radius, 10, 0, 0 ) \
                   + "<height>" + height_lo.to_s + "</height>\n"  \
                   + "</polyline>\n" \
                   + "</geometry>\n"
%>
    <%= '<model name="disk_' + j.to_s + '">' %>
      <pose><%= x_offset%> 0 <%= 0.1 + (height_up+height_lo + 0.01)*j + height_lo + z_offset%>  0 0 0</pose>
      <link name="disk">
        <inertial>
          <mass><%= mass %></mass>
          <inertia>
            <ixx><%= ixx %></ixx>
            <iyy><%= iyy %></iyy>
            <izz><%= izz %></izz>
            <ixy>0.0</ixy>
            <ixz>0.0</ixz>
            <iyz>0.0</iyz>
          </inertia>
        </inertial>
        <collision name="collision">
          <pose>0 0 <%= height_up/2.0 %>  0 0 0</pose>
          <%= geometry_s_up %>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <collision name="collision2">
            <pose>0 0 <%= -1.0*height_lo/2.0 %> 0 0 0 </pose>
          <%= geometry_s_lo %>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
        <visual name="visual">
          <pose>0 0 <%= height_up/2.0 %>  0 0 0</pose>
          <%= geometry_s_up %>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <%= '<name>Gazebo/' + color[j%disk_number].to_s + '</name>'%>
            </script>
          </material>
        </visual>
      <visual name="visual2">
          <pose>0 0 <%= -1.0* height_lo/2.0 %> 0 0 0 </pose>
          <%= geometry_s_lo %>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <%= '<name>Gazebo/' + color[j%disk_number].to_s + '</name>'%>
            </script>
          </material>
      </visual>
      </link>
    </model>
<%
    end
%>
    <model name="peg1">
      <static>true</static>
      <link name="link">
          <pose> 0 0 <%= peg_height/2.0 +  z_offset %> 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
                <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>

    <model name="peg2">
      <static>true</static>
      <link name="link">
          <pose>0.5 0 <%= peg_height/2.0+z_offset %> 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg2">
          <pose>0.0 0.0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg2">
          <pose>0.0 0.0 0.0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>

    <model name="peg3">
      <static>true</static>
      <link name="link">
        <pose>1.0 0 <%= peg_height/2.0+z_offset %> 0 0 0</pose>
        <self_collide>0</self_collide>
        <visual name="vis_peg3">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Wood</name>
           </script>
          </material>
        </visual>
        <collision name="col_peg3">
          <pose>0 0 0 0 0 0</pose>
          <geometry>
            <cylinder>
              <radius><%= peg_radius%></radius>
              <length><%= peg_height%></length>
            </cylinder>
          </geometry>
          <surface>
            <contact>
              <ode>
                <min_depth>0.001</min_depth>
                <max_vel>0.1</max_vel>
                <kp>1e8</kp>
                <kd>1</kd>
              </ode>
            </contact>
          </surface>
        </collision>
      </link>
    </model>



    <!-- end hanoi -->

    <include>
      <uri>model://table</uri>
      <pose>0 0 0 0 0 0</pose>
    </include>

    <gui>
      <camera name="user_camera">
        <pose>0 -0.6 1.3  0 0.4 1.57</pose>
      </camera>

      <plugin name="TimerGUIPlugin" filename="libTimerGUIPlugin.so">
        <size>155 80</size>
        <start_stop_button>1</start_stop_button>
        <topic>~/timer_control</topic>
      </plugin>

      <plugin name="HaptixGUIPlugin" filename="libHaptixGUIPlugin.so">
        <default_size>25 25</default_size>
        <force_min>0.001</force_min>
        <force_max>20</force_max>
        <color_no_contact>255 255 255 0</color_no_contact>
        <color_max>255 0 0 255</color_max>
        <color_min>255 227 32 255</color_min>
        <hand_side>right</hand_side>

        <contacts>
          <contact name="mpl::rPalm0">
            <pos>150 200</pos>
            <index>0</index>
            <size>50 100</size>
          </contact>
          <contact name="mpl::rPalm1">
            <index>1</index>
            <size>50 100</size>
            <pos>85 200</pos>
          </contact>

          <contact name="mpl::rHandEdge">
            <pos>10 235</pos>
            <index>2</index>
            <size>40 70</size>
          </contact>
          <contact name="mpl::rHandTop">
            <pos>299 55</pos>
            <index>3</index>
            <size>25 31</size>
          </contact>

          <contact name="mpl::rThProximal1">
            <pos>245 240</pos>
            <index>4</index>
          </contact>
          <contact name="mpl::rThProximal2">
            <pos>275 195</pos>
            <index>5</index>
          </contact>
          <contact name="mpl::rThDistal">
            <pos>302 130</pos>
            <index>6</index>
          </contact>

          <contact name="mpl::rIndProximal">
            <pos>218 116</pos>
            <index>7</index>
          </contact>
          <contact name="mpl::rIndMedial">
            <pos>233 43</pos>
            <index>8</index>
          </contact>
          <contact name="mpl::rIndDistal">
            <pos>248 -30</pos>
            <index>9</index>
          </contact>

          <contact name="mpl::rMidProximal">
            <pos>152 98</pos>
            <index>10</index>
          </contact>
          <contact name="mpl::rMidMedial">
            <pos>155 19</pos>
            <index>11</index>
          </contact>
          <contact name="mpl::rMidDistal">
            <pos>153 -60</pos>
            <index>12</index>
          </contact>

          <contact name="mpl::rRingProximal">
            <pos>84 101</pos>
            <index>13</index>
          </contact>
          <contact name="mpl::rRingMedial">
            <pos>74 41</pos>
            <index>14</index>
          </contact>
          <contact name="mpl::rRingDistal">
            <pos>64 -19</pos>
            <index>15</index>
          </contact>

          <contact name="mpl::rLittleProximal">
            <pos>35 156</pos>
            <index>16</index>
          </contact>
          <contact name="mpl::rLittleMedial">
            <pos>14 105</pos>
            <index>17</index>
          </contact>
          <contact name="mpl::rLittleDistal">
            <pos>-7 54</pos>
            <index>18</index>
          </contact>
        </contacts>

        <task_group name="DRC Demo Games">
          <task id="hanoi" name="Towers of Hanoi">
            <enabled>1</enabled>
            <initial>1</initial>
            <icon>file://media/gui/arat/arat_icons/grasp_1.jpg</icon>
            <instructions>
              Solve the classic Towers of Hanoi puzzle.
            </instructions>
          </task>

          <!--<task id="treasure" name="Hidden Treasure">
            <enabled>1</enabled>
            <initial>1</initial>
            <icon>file://media/gui/arat/arat_icons/grasp_2.jpg</icon>
            <instructions>
              Dig for treasure hidden in a sandbox of junk.
            </instructions>
          </task>-->

          <task id="pyramid" name="Bowling Pyramid">
            <enabled>1</enabled>
            <icon>file://media/gui/arat/arat_icons/grasp_3.jpg</icon>
            <instructions>
              Can you knock down an entire pyramid of robots?
            </instructions>
          </task>
        </task_group>

        <arm_keys>
	  <!-- Indices 0-5 are: tx, ty, tz, rx, ry, rz -->
          <arm inc_key="w" dec_key="s" index="0" increment=0.025></arm>
          <arm inc_key="a" dec_key="d" index="1" increment=0.025></arm>
          <arm inc_key="q" dec_key="e" index="2" increment=0.025></arm>
          <arm inc_key="W" dec_key="S" index="3" increment=0.025></arm>
          <arm inc_key="A" dec_key="D" index="4" increment=0.025></arm>
          <arm inc_key="Q" dec_key="E" index="5" increment=0.025></arm>
        </arm_keys>

        <motor_keys>
          <motor inc_key="z" dec_key="Z" index=0 increment=0.05></motor>
          <motor inc_key="x" dec_key="X" index=1 increment=0.05></motor>
          <motor inc_key="c" dec_key="C" index=2 increment=0.05></motor>
          <motor inc_key="1" dec_key="!" index=3 increment=0.05></motor>
          <motor inc_key="2" dec_key="@" index=4 increment=0.05></motor>
          <motor inc_key="3" dec_key="#" index=5 increment=0.05></motor>
          <motor inc_key="4" dec_key="$" index=6 increment=0.05></motor>
          <motor inc_key="5" dec_key="%" index=7 increment=0.05></motor>
          <motor inc_key="6" dec_key="^" index=8 increment=0.05></motor>
	  <!-- I'm having trouble parsing "&" and "&amp;", so I'll just use
	       "amp" and handle it in the code. -->
          <motor inc_key="7" dec_key="amp" index=9 increment=0.05></motor>
          <motor inc_key="8" dec_key="*" index=10 increment=0.05></motor>
          <motor inc_key="9" dec_key="(" index=11 increment=0.05></motor>
          <motor inc_key="0" dec_key=")" index=12 increment=0.05></motor>
        </motor_keys>

        <grasp_keys>
          <grasp inc_key="1" dec_key="!" name="Spherical" increment="0.015"></grasp>
          <grasp inc_key="2" dec_key="@" name="Cylindrical" increment="0.015"></grasp>
          <grasp inc_key="3" dec_key="#" name="FinePinch(British)" increment="0.015"></grasp>
          <grasp inc_key="4" dec_key="$" name="FinePinch(American)" increment="0.015"></grasp>
          <grasp inc_key="5" dec_key="%" name="ThreeFingerPinch" increment="0.015"></grasp>
          <grasp inc_key="6" dec_key="^" name="Palmar(Tray)" increment="0.015"></grasp>
          <grasp inc_key="7" dec_key="amp" name="Hook" increment="0.015"></grasp>
        </grasp_keys>

      </plugin>

    </gui>

   <physics type="ode">
      <gravity>0.000000 0.000000 -9.810000</gravity>
      <ode>
        <solver>
          <type>quick</type>
          <iters>80</iters>
          <precon_iters>0</precon_iters>
          <sor>1.000000</sor>
        </solver>
        <constraints>
          <cfm>0.000000</cfm>
          <erp>0.200000</erp>
          <contact_max_correcting_vel>0.000000</contact_max_correcting_vel>
          <contact_surface_layer>0.00000</contact_surface_layer>
        </constraints>
      </ode>
      <bullet>
        <solver>
          <type>sequential_impulse</type>
          <iters>100</iters>
          <sor>1.000000</sor>
        </solver>
        <constraints>
          <cfm>0.000000</cfm>
          <erp>0.200000</erp>
          <split_impulse>true</split_impulse>
          <split_impulse_penetration_threshold>-0.01</split_impulse_penetration_threshold>
          <contact_surface_layer>0.01000</contact_surface_layer>
        </constraints>
      </bullet>
      <simbody>
        <accuracy>0.001</accuracy>
        <max_transient_velocity>0.01</max_transient_velocity>
        <contact>
          <stiffness>1e8</stiffness>
          <dissipation>10</dissipation>
          <static_friction>0.15</static_friction>
          <dynamic_friction>0.1</dynamic_friction>
          <viscous_friction>0.0</viscous_friction>
        </contact>
      </simbody>
      <real_time_update_rate>1000</real_time_update_rate>
      <max_step_size>0.001000</max_step_size>
    </physics>

    <!-- A global light source -->
    <include>
      <uri>model://sun</uri>
    </include>

    <!-- A ground plane -->
    <include>
      <uri>model://ground_plane</uri>
    </include>

    <!-- The apl_description model is not (yet) publicly available. -->
    <include>
     <uri>model://mpl_haptix_right_forearm</uri>
     <pose>0.4 -0.9 1.2 0 0 3.1416</pose>
    </include>

    <model name="polhemus_source">
      <pose>-.5 260 1.3 0 3.1416 1.57</pose>
      <link name="link">
        <visual name="visual">
          <geometry>
            <box>
              <size>0.05 0.05 0.05</size>
            </box>
          </geometry>
          <material>
            <script>
              <uri>file://media/materials/scripts/gazebo.material</uri>
              <name>Gazebo/Grey</name>
            </script>
          </material>
        </visual>
      </link>
      <static>true</static>
    </model>

    <include>
      <uri>model://tinybot</uri>
      <pose><%= distance_offset %> 2 0 0 0 0 </pose>
    </include>

    <plugin name="arrange_polhemus" filename="libArrangePlugin.so">
      <topic_name>~/arrange_polhemus</topic_name>
      <model_name>polhemus_source</model_name>

      <initial_arrangement>no_polhemus</initial_arrangement>
      <arrangement name="no_polhemus">
        <pose model="polhemus_source">-.5 260 1.3 0 3.1416 1.57</pose>
      </arrangement>
      <arrangement name="have_polhemus">
        <pose model="polhemus_source">-.5 0 1.3 0 3.1416 1.57</pose>
      </arrangement>
    </plugin>

    <plugin name="hydra" filename="libHydraPlugin.so">
      <pivot>0.04 0 0</pivot>
      <grab>0.12 0 0</grab>
    </plugin>

    <plugin name="arrange_plugin" filename="libArrangePlugin.so">
      <topic_name>~/arrange</topic_name>

      <!-- TODO generate list of model names using ERB and print them out -->
      <!-- do the same with initial positions? -->
      <!-- Hanoi -->
      <!--<model_name>peg1</model_name>
      <model_name>peg2</model_name>
      <model_name>peg3</model_name>-->

      <%
          for i in 0..pyramid_layers
            for j in 0..(pyramid_layers-i)
       %>
            <model_name><%='tinybot_'+i.to_s + '_' + j.to_s %></model_name>
      <%
            end
          end
       %>
      <model_name>cricket_ball</model_name>

      <initial_arrangement>pyramid</initial_arrangement>

      <arrangement name="hanoi">
      </arrangement>

      <!--<arrangement name="treasure">
      </arrangement>-->

      <arrangement name="pyramid">
        <%
          for i in 0..pyramid_layers
            for j in 0..(pyramid_layers-i)
              x = -(pyramid_layers - i)*pyramid_r2 + j*2*pyramid_r2 + pyramid_clearance
              y = 0
              z = i*pyramid_h + pyramid_clearance
         %>
           <pose model=<%='"tinybot_'+i.to_s + '_' + j.to_s + '"' %>><%=x%> <%=y%> <%=z + 1.0%> 0 0 <%= Math::PI%></pose>
         <%
            end
          end
         %>
          <pose model="cricket_ball"><%= 0.5%> 0 1.0 0 0 0</pose>
      </arrangement>
    </plugin>

  </world>
</sdf>
